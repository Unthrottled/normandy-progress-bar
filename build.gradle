def properties(String key) {
  return project.findProperty(key).toString()
}

plugins {
  id 'org.jetbrains.intellij' version '1.6.0'
  id "org.jetbrains.kotlin.jvm" version "1.6.21"
  id 'org.kordamp.gradle.markdown' version '2.2.0'
  id "org.jlleitschuh.gradle.ktlint" version "10.3.0"
}
repositories {
  mavenCentral()
}

group 'io.unthrottled'
version '1.10.0'

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
  implementation 'commons-io:commons-io:2.11.0'
  implementation 'io.sentry:sentry:6.0.0'
  implementation "com.google.code.gson:gson:2.9.0"
}

configurations {
  implementation.exclude group: 'org.slf4j'
}

intellij {
  version.set('LATEST-EAP-SNAPSHOT')
  type.set('IU')
  // todo: re-enable when Doki supports 2022.2
//  plugins.set(
//    Collections.singletonList('io.acari.DDLCTheme:74.1-1.0.2')
//  )
}

compileKotlin {
  kotlinOptions.jvmTarget = "11"
}
compileTestKotlin {
  kotlinOptions.jvmTarget = "11"
}

markdownToHtml {
  sourceDir file("$projectDir/docs")
  outputDir file("$projectDir/build/html")
}

tasks.runIde {
  idePath = properties("idePath")
  if (!idePath.isEmpty()) {
    ideDir.set(file(idePath))
  }
}

tasks.patchPluginXml {
  def releaseNotes = "$projectDir/build/html/RELEASE-NOTES.html"
  if (file(releaseNotes).exists()) {
    changeNotes.set(file(releaseNotes).text)
  }
  sinceBuild.set(System.getenv("pluginSinceBuild") ?: sinceBuildP)
  untilBuild.set(System.getenv("pluginUntilBuild") ?: untilBuildP)
}

tasks.patchPluginXml.dependsOn("markdownToHtml")
